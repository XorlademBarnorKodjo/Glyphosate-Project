{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kodjo.barnor\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py:992: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._where(~key, value, inplace=True)\n",
      "C:\\Users\\kodjo.barnor\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py:992: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._where(~key, value, inplace=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['Article Title',\n",
       " 'Article Link',\n",
       " 'General Outcome',\n",
       " 'General Outcome (1,0)',\n",
       " 'Desc General Outcome',\n",
       " 'Daily Intake',\n",
       " 'Descr Daily Intake',\n",
       " 'Health Outcome',\n",
       " 'Descr Health Outcome',\n",
       " 'Environmental Outcome',\n",
       " 'Descr Environmental Outcome',\n",
       " 'Fund Source',\n",
       " 'Fund Source',\n",
       " 'Author Affiliation',\n",
       " 'Loc Authors',\n",
       " 'Loc Experiment',\n",
       " 'Year',\n",
       " 'Journal',\n",
       " 'Loc Journal',\n",
       " 'Loc Editor Journal',\n",
       " 'Current Impact Factor',\n",
       " 'Impact F Publishing Year',\n",
       " 'Num Citations',\n",
       " 'Public',\n",
       " 'Private',\n",
       " 'University',\n",
       " 'International',\n",
       " 'Research',\n",
       " 'Slovak Republic',\n",
       " 'Ecuador',\n",
       " 'Poland',\n",
       " 'Morocco',\n",
       " 'Austria',\n",
       " 'Argentina',\n",
       " 'Sweden',\n",
       " 'Spain',\n",
       " 'Hungary',\n",
       " 'Cameroon',\n",
       " 'Colombia',\n",
       " 'Brazl',\n",
       " 'Serbia',\n",
       " 'Thailand',\n",
       " 'Iraq',\n",
       " 'South Africa',\n",
       " 'Denmark',\n",
       " 'Switzerland',\n",
       " 'Republic Of Korea',\n",
       " 'Sri Lanka',\n",
       " 'Italy',\n",
       " 'Finland',\n",
       " 'Egypt',\n",
       " 'Iran',\n",
       " 'Netherlands',\n",
       " 'Belgium',\n",
       " 'Turkey',\n",
       " 'Greece',\n",
       " 'Slovenia',\n",
       " 'Ukraine',\n",
       " 'India',\n",
       " 'Nigeria',\n",
       " 'Brazil',\n",
       " 'Romania',\n",
       " 'China',\n",
       " 'Uk',\n",
       " 'Germany',\n",
       " 'New Zealand',\n",
       " 'Australia',\n",
       " 'France',\n",
       " 'Croatia',\n",
       " 'Canada',\n",
       " 'Japan',\n",
       " 'Mexico',\n",
       " 'Portugal',\n",
       " 'Usa',\n",
       " 'Latvia',\n",
       " 'Norway',\n",
       " 'Ireland',\n",
       " 'Taiwan',\n",
       " 'Tunisia',\n",
       " '1987',\n",
       " '1989',\n",
       " '1990',\n",
       " '1991',\n",
       " '1993',\n",
       " '1994',\n",
       " '1995',\n",
       " '1997',\n",
       " '1999',\n",
       " '2000',\n",
       " '2001',\n",
       " '2002',\n",
       " '2003',\n",
       " '2004',\n",
       " '2005',\n",
       " '2006',\n",
       " '2007',\n",
       " '2008',\n",
       " '2009',\n",
       " '2010',\n",
       " '2011',\n",
       " '2012',\n",
       " '2013',\n",
       " '2014',\n",
       " '2015',\n",
       " '2016',\n",
       " '2017',\n",
       " '2018',\n",
       " '2019',\n",
       " '2020',\n",
       " '2021']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_excel(\"dataWithSomeReformatting1.xlsx\", index_col = [0])\n",
    "data.rename(columns={key: str(key).replace(\"_\", \" \").title() for key in data}, inplace= True)\n",
    "data[\"General Outcome\"][data[\"Environmental Outcome\"]==1]=1\n",
    "data[\"General Outcome\"][data[\"Health Outcome\"]==1]=1\n",
    "keys = list(data.keys())\n",
    "list(data.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Article Title</th>\n",
       "      <th>Article Link</th>\n",
       "      <th>General Outcome</th>\n",
       "      <th>General Outcome (1,0)</th>\n",
       "      <th>Desc General Outcome</th>\n",
       "      <th>Daily Intake</th>\n",
       "      <th>Descr Daily Intake</th>\n",
       "      <th>Health Outcome</th>\n",
       "      <th>Descr Health Outcome</th>\n",
       "      <th>Environmental Outcome</th>\n",
       "      <th>...</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "      <th>2018</th>\n",
       "      <th>2019</th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Potential of terracing to reduce glyphosate an...</td>\n",
       "      <td>https://link.springer.com/article/10.1007%2Fs1...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Found glyphosate in soil and sediment</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Uptake and persistence of the herbicide glyph...</td>\n",
       "      <td>https://cdnsciencepub.com/doi/abs/10.1139/x89-128</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>High glyphosate levels above maximum permissib...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Residues of glyphosate and its metabolite AMPA...</td>\n",
       "      <td>https://cdnsciencepub.com/doi/pdf/10.4141/cjps...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Accepted seed residues of less than 5.0 mg kg-...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Glyphosate pathways to modern diseases VI: Pri...</td>\n",
       "      <td>http://www.amsi.ge/jbpc/11717/25SA16A.pdf</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Health  risks associated with the indiscrimina...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Health risk, presence of glyphosate in many po...</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A generational study of glyphosate-tolerant so...</td>\n",
       "      <td>https://doi.org/10.1016/j.fct.2003.08.003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>It was concluded that the transgenic soybean ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>No negative effect</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>Effect of glyphosate herbicide on acetylcholin...</td>\n",
       "      <td>https://doi.org/10.1016/j.ecoenv.2005.07.017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>The present study reveals that exposure of L. ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>Comparative cyto- and genotoxicity assessment ...</td>\n",
       "      <td>https://doi.org/10.1016/j.envres.2019.108851</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>the GBHs-induced DNA damage observed in the co...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>the GBHs-induced DNA damage observed in the co...</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>Genotoxic effects of glyphosate on Physalaemus...</td>\n",
       "      <td>https://doi.org/10.1016/j.etap.2020.103516</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Glyphosate herbicide can be considered a genot...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Glyphosate herbicide can be considered a genot...</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>Ecotoxicological risk assessment for the herbi...</td>\n",
       "      <td>https://doi.org/10.1016/j.envpol.2017.10.100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Potential adverse effect on aquatic invertebrates</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>Combined effects of exposure to sub-lethal con...</td>\n",
       "      <td>https://doi.org/10.1007/s10646-020-02233-0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Adverse effect on crayfish</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>503 rows × 110 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Article Title  \\\n",
       "0    Potential of terracing to reduce glyphosate an...   \n",
       "1     Uptake and persistence of the herbicide glyph...   \n",
       "2    Residues of glyphosate and its metabolite AMPA...   \n",
       "3    Glyphosate pathways to modern diseases VI: Pri...   \n",
       "4    A generational study of glyphosate-tolerant so...   \n",
       "..                                                 ...   \n",
       "498  Effect of glyphosate herbicide on acetylcholin...   \n",
       "499  Comparative cyto- and genotoxicity assessment ...   \n",
       "500  Genotoxic effects of glyphosate on Physalaemus...   \n",
       "501  Ecotoxicological risk assessment for the herbi...   \n",
       "502  Combined effects of exposure to sub-lethal con...   \n",
       "\n",
       "                                          Article Link  General Outcome  \\\n",
       "0    https://link.springer.com/article/10.1007%2Fs1...                1   \n",
       "1    https://cdnsciencepub.com/doi/abs/10.1139/x89-128                1   \n",
       "2    https://cdnsciencepub.com/doi/pdf/10.4141/cjps...                0   \n",
       "3            http://www.amsi.ge/jbpc/11717/25SA16A.pdf                1   \n",
       "4            https://doi.org/10.1016/j.fct.2003.08.003                0   \n",
       "..                                                 ...              ...   \n",
       "498       https://doi.org/10.1016/j.ecoenv.2005.07.017                1   \n",
       "499       https://doi.org/10.1016/j.envres.2019.108851                1   \n",
       "500         https://doi.org/10.1016/j.etap.2020.103516                1   \n",
       "501       https://doi.org/10.1016/j.envpol.2017.10.100                1   \n",
       "502         https://doi.org/10.1007/s10646-020-02233-0                1   \n",
       "\n",
       "     General Outcome (1,0)                               Desc General Outcome  \\\n",
       "0                        1              Found glyphosate in soil and sediment   \n",
       "1                        1  High glyphosate levels above maximum permissib...   \n",
       "2                        0  Accepted seed residues of less than 5.0 mg kg-...   \n",
       "3                        1  Health  risks associated with the indiscrimina...   \n",
       "4                        0   It was concluded that the transgenic soybean ...   \n",
       "..                     ...                                                ...   \n",
       "498                      1  The present study reveals that exposure of L. ...   \n",
       "499                      1  the GBHs-induced DNA damage observed in the co...   \n",
       "500                      1  Glyphosate herbicide can be considered a genot...   \n",
       "501                      1  Potential adverse effect on aquatic invertebrates   \n",
       "502                      1                         Adverse effect on crayfish   \n",
       "\n",
       "    Daily Intake Descr Daily Intake  Health Outcome  \\\n",
       "0            NaN                NaN               0   \n",
       "1            NaN                NaN               0   \n",
       "2            NaN                NaN               0   \n",
       "3            NaN                NaN               1   \n",
       "4            NaN                NaN               0   \n",
       "..           ...                ...             ...   \n",
       "498          NaN                NaN               0   \n",
       "499          NaN                NaN               1   \n",
       "500          NaN                NaN               1   \n",
       "501          NaN                NaN               0   \n",
       "502          NaN                NaN               0   \n",
       "\n",
       "                                  Descr Health Outcome Environmental Outcome  \\\n",
       "0                                                  NaN                     1   \n",
       "1                                                  NaN                     1   \n",
       "2                                                  NaN                     0   \n",
       "3    Health risk, presence of glyphosate in many po...                     0   \n",
       "4                                   No negative effect                     0   \n",
       "..                                                 ...                   ...   \n",
       "498                                                NaN                     1   \n",
       "499  the GBHs-induced DNA damage observed in the co...                     0   \n",
       "500  Glyphosate herbicide can be considered a genot...                     0   \n",
       "501                                                NaN                     1   \n",
       "502                                                NaN                     1   \n",
       "\n",
       "     ... 2012 2013 2014 2015 2016 2017  2018 2019 2020 2021  \n",
       "0    ...    0    0    0    0    0    0     0    1    0    0  \n",
       "1    ...    0    0    0    0    0    0     0    0    0    0  \n",
       "2    ...    0    0    0    0    0    0     0    0    0    0  \n",
       "3    ...    0    0    0    0    0    1     0    0    0    0  \n",
       "4    ...    0    0    0    0    0    0     0    0    0    0  \n",
       "..   ...  ...  ...  ...  ...  ...  ...   ...  ...  ...  ...  \n",
       "498  ...    0    0    0    0    0    0     0    0    0    0  \n",
       "499  ...    0    0    0    0    0    0     0    1    0    0  \n",
       "500  ...    0    0    0    0    0    0     0    0    0    1  \n",
       "501  ...    0    0    0    0    0    0     1    0    0    0  \n",
       "502  ...    0    0    0    0    0    0     0    0    1    0  \n",
       "\n",
       "[503 rows x 110 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "years = keys[-31:]\n",
    "countries = keys[-82:-31]\n",
    "data.rename(columns = {year:str(year) for year in years}, inplace = True)\n",
    "years = [str(year) for year in years]\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "General Outcome               int64\n",
       "Num Citations               float64\n",
       "Public                        int64\n",
       "Private                       int64\n",
       "University                    int64\n",
       "International                 int64\n",
       "Research                      int64\n",
       "Impact F Publishing Year    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### drop Iran due to colinearity\n",
    "#del years[0]\n",
    "keys =[\"General Outcome\",\n",
    "       #\"Health Outcome\",\n",
    "       #\"Environmental Outcome\",\n",
    "       'Num Citations',\n",
    "       'Public',\n",
    "       'Private',\n",
    "       'University',\n",
    "       'International',\n",
    "       'Research',\n",
    "       \"Impact F Publishing Year\"]\n",
    "keys = keys #+ countries\n",
    "#keys = [\"General_outcome\", \"Year\", \"Fund_Source\", \"Loc_experiment\", \"Journal\"]\n",
    "max_cond_vars = len(keys) - 2\n",
    "data = data[keys].dropna()\n",
    "data[\"Impact F Publishing Year\"] = data[\"Impact F Publishing Year\"].astype(float)\n",
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>General Outcome</th>\n",
       "      <th>Num Citations</th>\n",
       "      <th>Public</th>\n",
       "      <th>Private</th>\n",
       "      <th>University</th>\n",
       "      <th>International</th>\n",
       "      <th>Research</th>\n",
       "      <th>Impact F Publishing Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>29.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1</td>\n",
       "      <td>256.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>1</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.628</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>475 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     General Outcome  Num Citations  Public  Private  University  \\\n",
       "0                  1            1.0       1        0           0   \n",
       "3                  1           20.0       0        1           0   \n",
       "4                  0          108.0       1        0           0   \n",
       "5                  1           29.0       1        0           0   \n",
       "6                  0           22.0       1        0           0   \n",
       "..               ...            ...     ...      ...         ...   \n",
       "498                1          256.0       0        0           0   \n",
       "499                1            5.0       1        0           0   \n",
       "500                1            0.0       1        0           0   \n",
       "501                1           42.0       0        0           0   \n",
       "502                1            7.0       1        0           1   \n",
       "\n",
       "     International  Research  Impact F Publishing Year  \n",
       "0                0         0                     2.790  \n",
       "3                0         0                     2.950  \n",
       "4                0         0                     2.662  \n",
       "5                0         0                     1.559  \n",
       "6                0         0                     1.780  \n",
       "..             ...       ...                       ...  \n",
       "498              0         0                     2.335  \n",
       "499              0         0                     5.715  \n",
       "500              0         0                     3.595  \n",
       "501              0         0                     6.125  \n",
       "502              0         0                     2.628  \n",
       "\n",
       "[475 rows x 8 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bcd7f3a974444eceb12f8e5adc2ee52e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pingouin\n",
    "from pgmpy.estimators import PC\n",
    "c = PC(data[keys].dropna())\n",
    "max_cond_vars = len(keys) - 2\n",
    "\n",
    "sig =0.05\n",
    "model = c.estimate(return_type = \"dag\", variant= \"parallel\", \n",
    "                   significance_level = sig, \n",
    "                   max_cond_vars = max_cond_vars, ci_test = \"pearsonr\")\n",
    "edges = model.edges()\n",
    "pcorr = data.pcorr()\n",
    "weights = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'General Outcome': ['Num Citations',\n",
       "  'Public',\n",
       "  'Private',\n",
       "  'University',\n",
       "  'International',\n",
       "  'Research',\n",
       "  'Impact F Publishing Year'],\n",
       " 'Num Citations': ['General Outcome',\n",
       "  'Public',\n",
       "  'Private',\n",
       "  'University',\n",
       "  'International',\n",
       "  'Research',\n",
       "  'Impact F Publishing Year'],\n",
       " 'Public': ['General Outcome',\n",
       "  'Num Citations',\n",
       "  'Private',\n",
       "  'University',\n",
       "  'International',\n",
       "  'Research',\n",
       "  'Impact F Publishing Year'],\n",
       " 'Private': ['General Outcome',\n",
       "  'Num Citations',\n",
       "  'Public',\n",
       "  'University',\n",
       "  'International',\n",
       "  'Research',\n",
       "  'Impact F Publishing Year'],\n",
       " 'University': ['General Outcome',\n",
       "  'Num Citations',\n",
       "  'Public',\n",
       "  'Private',\n",
       "  'International',\n",
       "  'Research',\n",
       "  'Impact F Publishing Year'],\n",
       " 'International': ['General Outcome',\n",
       "  'Num Citations',\n",
       "  'Public',\n",
       "  'Private',\n",
       "  'University',\n",
       "  'Research',\n",
       "  'Impact F Publishing Year'],\n",
       " 'Research': ['General Outcome',\n",
       "  'Num Citations',\n",
       "  'Public',\n",
       "  'Private',\n",
       "  'University',\n",
       "  'International',\n",
       "  'Impact F Publishing Year'],\n",
       " 'Impact F Publishing Year': ['General Outcome',\n",
       "  'Num Citations',\n",
       "  'Public',\n",
       "  'Private',\n",
       "  'University',\n",
       "  'International',\n",
       "  'Research']}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "undirected_graph = {key:[] for key in data.keys()}\n",
    "for x in undirected_graph:\n",
    "    remaining_vars = [y for y in data.keys() if y != x]\n",
    "    for y in remaining_vars:\n",
    "        undirected_graph[x].append(y)\n",
    "\n",
    "undirected_graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x864 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patches import ArrowStyle\n",
    "import networkx as nx\n",
    "def graph_DAG(edges, data, title = \"\"):\n",
    "    pcorr = data.pcorr()\n",
    "    graph = nx.DiGraph()\n",
    "    edge_labels = {}\n",
    "    for edge in edges:\n",
    "        edge_labels[edge] = str(round(pcorr[edge[0]].loc[edge[1]],2))\n",
    "        \n",
    "    graph.add_edges_from(edges)\n",
    "    color_map = [\"C0\" for g in graph]\n",
    "\n",
    "    fig, ax = plt.subplots(figsize = (20,12))\n",
    "    graph.nodes()\n",
    "    plt.tight_layout()\n",
    "    pos = nx.spring_layout(graph)#, k = 5/(len(sig_corr.keys())**.5))\n",
    "\n",
    "    plt.title(title, fontsize = 30)\n",
    "    nx.draw_networkx(graph, pos, node_color=color_map, node_size = 1200,\n",
    "                     with_labels=True,  arrows=True,\n",
    "                     font_color = \"black\",\n",
    "                     font_size = 26, alpha = 1,\n",
    "                     width = 1, edge_color = \"C1\",\n",
    "                     arrowstyle=ArrowStyle(\"Fancy, head_length=3, head_width=1.5, tail_width=.1\"), ax = ax)\n",
    "    nx.draw_networkx_edge_labels(graph,pos,\n",
    "                                 edge_labels=edge_labels,\n",
    "                                 font_color='green',\n",
    "                                 font_size=20)\n",
    "\n",
    "graph_DAG(edges, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x1440 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from pgmpy.estimators import PC\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patches import ArrowStyle\n",
    "import networkx as nx\n",
    "import pingouin\n",
    "from linearmodels.system import SUR\n",
    "\n",
    "def graph_DAG(edges, \n",
    "              df, #df used to generate DAG\n",
    "              #pp, #PdfPages() object \n",
    "              edge_labels = False, # Dictinary with numerical values\n",
    "              sig_vals = [.05,.01,.001],\n",
    "              title = \"\"):\n",
    "    def build_edge_labels(edges, df, sig_vals):\n",
    "        edge_labels = {}\n",
    "        for edge in edges:\n",
    "            controls = [key for key in df.keys() if key not in edge]\n",
    "            controls = list(set(controls))\n",
    "            keep_controls = []\n",
    "            for control in controls:\n",
    "                control_edges = [ctrl_edge for ctrl_edge in edges if control == ctrl_edge[0] ]\n",
    "                if (control, edge[1]) in control_edges:\n",
    "                    keep_controls.append(control)                \n",
    "#             print(edge, keep_controls)\n",
    "            pcorr = df.partial_corr(x = edge[0], y = edge[1], covar=keep_controls,\n",
    "                                  method = \"pearson\")\n",
    "            label = str(round(pcorr[\"r\"][0],2))\n",
    "            pvalue = pcorr[\"p-val\"][0]\n",
    "#             pcorr = df[[edge[0], edge[1]]+keep_controls].pcorr()\n",
    "#             label = pcorr[edge[0]].loc[edge[1]]\n",
    "\n",
    "            for sig_val in sig_vals:\n",
    "                if pvalue < sig_val: \n",
    "                    label = label + \"*\"   \n",
    "            \n",
    "            edge_labels[edge] = label\n",
    "        return edge_labels\n",
    "    graph = nx.DiGraph()\n",
    "    if edge_labels == False:\n",
    "        edge_labels = build_edge_labels(edges, \n",
    "                                        df, \n",
    "                                        sig_vals=sig_vals) \n",
    "    graph.add_edges_from(edges)\n",
    "    color_map = [\"C0\" for g in graph]\n",
    "\n",
    "    fig, ax = plt.subplots(figsize = (20,20))\n",
    "    graph.nodes()\n",
    "    plt.tight_layout()\n",
    "    pos = nx.spring_layout(graph)#, k = 5/(len(sig_corr.keys())**.5))\n",
    "\n",
    "    nx.draw_networkx(graph, pos, node_color=color_map, node_size = 2500,\n",
    "                     with_labels=True,  arrows=True,\n",
    "                     font_color = \"white\",\n",
    "                     font_size = 26, alpha = 1,\n",
    "                     width = 1, edge_color = \"C1\",\n",
    "                     arrowstyle=ArrowStyle(\"Fancy, head_length=3, head_width=1.5, tail_width=.1\"),\n",
    "                     connectionstyle='arc3, rad = 0.05',\n",
    "                     ax = ax)\n",
    "    \n",
    "    plt.title(title, fontsize = 30)\n",
    "#     print(edge_labels)\n",
    "    edge_labels2 = []\n",
    "    for u, v, d in graph.edges(data=True):\n",
    "        if pos[u][0] > pos[v][0]:  \n",
    "            if (v,u) in edge_labels.keys():\n",
    "                edge_labels2.append(((u, v,), f'{edge_labels[u,v]}\\n\\n\\n{edge_labels[(v,u)]}'))  \n",
    "        if (v,u) not in edge_labels.keys():\n",
    "            edge_labels2.append(((u,v,), f'{edge_labels[(u,v)]}'))\n",
    "    edge_labels = dict(edge_labels2)\n",
    "\n",
    "    nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels, font_color='C2')\n",
    "    \n",
    "    nx.draw_networkx_edge_labels(graph,pos,\n",
    "                                 edge_labels=edge_labels,\n",
    "                                 font_color='green',\n",
    "                                 font_size=20)\n",
    "    #pp.savefig(fig, bbox_inches = \"tight\")  \n",
    "    plt.show()\n",
    "    plt.close()\n",
    "\n",
    "# https://pgmpy.org/structure_estimator/pc.html\n",
    "def DAG(dag_data, \n",
    "        variant, #\"orig\", \"stable\", \"parallel\"\n",
    "        ci_test, # ”chi_square”, \"pearsonr\"\n",
    "        sig): #pvalue cutoff e.g 0.05, 0.1, 0.2\n",
    "    c = PC(dag_data)\n",
    "#     edges = c.skeleton_to_pdag(*c.build_skeleton())\n",
    "    max_cond_vars = len(dag_data.keys()) - 2\n",
    "    model = c.estimate(return_type = \"pdag\",variant= variant, \n",
    "                       significance_level = sig, \n",
    "                       max_cond_vars = max_cond_vars, \n",
    "                       ci_test = ci_test)\n",
    "    edges = model.edges()\n",
    "    \n",
    "    return edges\n",
    "\n",
    "graph_DAG(edges, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gen_pcorr(df, method = \"pearson\", sig = 0.01):\n",
    "\n",
    "    pcs_dct = {}\n",
    "    sig_corr_dct = {}\n",
    "    for x in df.keys():\n",
    "        sig_corr_dct[x] = []\n",
    "        pcs_dct[x]={}\n",
    "        for y in df.keys():\n",
    "            # control variables\n",
    "            # select variables that are not x or y\n",
    "            other_vars = [z for z in df.keys() if z != y and z != x ]\n",
    "            if x == y:\n",
    "                # No need to calculate if the variable is itself\n",
    "                pcs_dct[x][y] = 1\n",
    "            else:\n",
    "                pcs_dct[x][y] = df.partial_corr(x=x,y=y, covar=other_vars,\n",
    "                                      method=method).round(3)\n",
    "                if pcs_dct[x][y][\"p-val\"].values[0] < sig:\n",
    "                    sig_corr_dct[x].append((y, pcs_dct[x][y][\"r\"].values[0]))\n",
    "\n",
    "    return pcs_dct, sig_corr_dct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:        General Outcome   R-squared:                       0.031\n",
      "Model:                            OLS   Adj. R-squared:                  0.016\n",
      "Method:                 Least Squares   F-statistic:                     2.124\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):             0.0399\n",
      "Time:                        17:09:38   Log-Likelihood:                -274.22\n",
      "No. Observations:                 474   AIC:                             564.4\n",
      "Df Residuals:                     466   BIC:                             597.7\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "Num Citations                0.0003      0.000      1.294      0.196      -0.000       0.001\n",
      "Public                       0.0465      0.043      1.072      0.284      -0.039       0.132\n",
      "Private                     -0.1265      0.071     -1.794      0.073      -0.265       0.012\n",
      "University                   0.0561      0.048      1.162      0.246      -0.039       0.151\n",
      "International               -0.1231      0.136     -0.907      0.365      -0.390       0.144\n",
      "Research                    -0.0702      0.253     -0.277      0.782      -0.568       0.427\n",
      "Impact F Publishing Year     0.0250      0.012      2.035      0.042       0.001       0.049\n",
      "constant                     0.6293      0.046     13.565      0.000       0.538       0.720\n",
      "==============================================================================\n",
      "Omnibus:                       91.652   Durbin-Watson:                   1.775\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               97.452\n",
      "Skew:                          -1.045   Prob(JB):                     6.90e-22\n",
      "Kurtosis:                       2.249   Cond. No.                     1.14e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.14e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          Num Citations   R-squared:                       0.041\n",
      "Model:                            OLS   Adj. R-squared:                  0.026\n",
      "Method:                 Least Squares   F-statistic:                     2.836\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):            0.00665\n",
      "Time:                        17:09:38   Log-Likelihood:                -2728.2\n",
      "No. Observations:                 474   AIC:                             5472.\n",
      "Df Residuals:                     466   BIC:                             5506.\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "General Outcome             10.6014      8.194      1.294      0.196      -5.500      26.703\n",
      "Public                       4.8256      7.695      0.627      0.531     -10.296      19.948\n",
      "Private                     41.6777     12.391      3.363      0.001      17.328      66.027\n",
      "University                   6.2791      8.566      0.733      0.464     -10.554      23.112\n",
      "International                0.9430     24.063      0.039      0.969     -46.343      48.229\n",
      "Research                    24.1235     44.834      0.538      0.591     -63.977     112.224\n",
      "Impact F Publishing Year     4.4667      2.178      2.051      0.041       0.187       8.746\n",
      "constant                    16.1384      9.680      1.667      0.096      -2.884      35.161\n",
      "==============================================================================\n",
      "Omnibus:                      440.226   Durbin-Watson:                   1.363\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11737.481\n",
      "Skew:                           4.102   Prob(JB):                         0.00\n",
      "Kurtosis:                      25.956   Cond. No.                         44.0\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                 Public   R-squared:                       0.082\n",
      "Model:                            OLS   Adj. R-squared:                  0.068\n",
      "Method:                 Least Squares   F-statistic:                     5.946\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):           1.22e-06\n",
      "Time:                        17:09:38   Log-Likelihood:                -304.62\n",
      "No. Observations:                 474   AIC:                             625.2\n",
      "Df Residuals:                     466   BIC:                             658.5\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "General Outcome              0.0529      0.049      1.072      0.284      -0.044       0.150\n",
      "Num Citations                0.0002      0.000      0.627      0.531      -0.000       0.001\n",
      "Private                     -0.2539      0.075     -3.406      0.001      -0.400      -0.107\n",
      "University                  -0.0566      0.052     -1.099      0.272      -0.158       0.045\n",
      "International               -0.4731      0.143     -3.306      0.001      -0.754      -0.192\n",
      "Research                    -0.3616      0.269     -1.342      0.180      -0.891       0.168\n",
      "Impact F Publishing Year     0.0574      0.013      4.456      0.000       0.032       0.083\n",
      "constant                     0.4852      0.054      8.998      0.000       0.379       0.591\n",
      "==============================================================================\n",
      "Omnibus:                     2428.250   Durbin-Watson:                   1.880\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               60.148\n",
      "Skew:                          -0.540   Prob(JB):                     8.69e-14\n",
      "Kurtosis:                       1.630   Cond. No.                     1.14e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.14e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                Private   R-squared:                       0.090\n",
      "Model:                            OLS   Adj. R-squared:                  0.076\n",
      "Method:                 Least Squares   F-statistic:                     6.547\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):           2.19e-07\n",
      "Time:                        17:09:38   Log-Likelihood:                -73.333\n",
      "No. Observations:                 474   AIC:                             162.7\n",
      "Df Residuals:                     466   BIC:                             196.0\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "General Outcome             -0.0542      0.030     -1.794      0.073      -0.114       0.005\n",
      "Num Citations                0.0006      0.000      3.363      0.001       0.000       0.001\n",
      "Public                      -0.0957      0.028     -3.406      0.001      -0.151      -0.040\n",
      "University                  -0.1194      0.031     -3.829      0.000      -0.181      -0.058\n",
      "International               -0.1801      0.088     -2.035      0.042      -0.354      -0.006\n",
      "Research                    -0.1746      0.165     -1.055      0.292      -0.500       0.151\n",
      "Impact F Publishing Year     0.0183      0.008      2.283      0.023       0.003       0.034\n",
      "constant                     0.1552      0.035      4.418      0.000       0.086       0.224\n",
      "==============================================================================\n",
      "Omnibus:                      233.088   Durbin-Watson:                   1.912\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              855.619\n",
      "Skew:                           2.372   Prob(JB):                    1.60e-186\n",
      "Kurtosis:                       7.562   Cond. No.                     1.14e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.14e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             University   R-squared:                       0.042\n",
      "Model:                            OLS   Adj. R-squared:                  0.027\n",
      "Method:                 Least Squares   F-statistic:                     2.890\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):            0.00577\n",
      "Time:                        17:09:38   Log-Likelihood:                -253.73\n",
      "No. Observations:                 474   AIC:                             523.5\n",
      "Df Residuals:                     466   BIC:                             556.8\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "General Outcome              0.0515      0.044      1.162      0.246      -0.036       0.139\n",
      "Num Citations                0.0002      0.000      0.733      0.464      -0.000       0.001\n",
      "Public                      -0.0457      0.042     -1.099      0.272      -0.127       0.036\n",
      "Private                     -0.2556      0.067     -3.829      0.000      -0.387      -0.124\n",
      "International               -0.1987      0.130     -1.532      0.126      -0.454       0.056\n",
      "Research                    -0.2778      0.242     -1.148      0.252      -0.753       0.198\n",
      "Impact F Publishing Year     0.0133      0.012      1.122      0.262      -0.010       0.036\n",
      "constant                     0.2096      0.052      4.064      0.000       0.108       0.311\n",
      "==============================================================================\n",
      "Omnibus:                       80.203   Durbin-Watson:                   1.884\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              110.474\n",
      "Skew:                           1.157   Prob(JB):                     1.03e-24\n",
      "Kurtosis:                       2.510   Cond. No.                     1.14e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.14e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          International   R-squared:                       0.044\n",
      "Model:                            OLS   Adj. R-squared:                  0.030\n",
      "Method:                 Least Squares   F-statistic:                     3.070\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):            0.00360\n",
      "Time:                        17:09:38   Log-Likelihood:                 235.58\n",
      "No. Observations:                 474   AIC:                            -455.2\n",
      "Df Residuals:                     466   BIC:                            -421.9\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "General Outcome             -0.0143      0.016     -0.907      0.365      -0.045       0.017\n",
      "Num Citations             3.495e-06   8.92e-05      0.039      0.969      -0.000       0.000\n",
      "Public                      -0.0484      0.015     -3.306      0.001      -0.077      -0.020\n",
      "Private                     -0.0489      0.024     -2.035      0.042      -0.096      -0.002\n",
      "University                  -0.0252      0.016     -1.532      0.126      -0.058       0.007\n",
      "Research                    -0.0513      0.086     -0.595      0.552      -0.221       0.118\n",
      "Impact F Publishing Year     0.0131      0.004      3.146      0.002       0.005       0.021\n",
      "constant                     0.0395      0.019      2.121      0.034       0.003       0.076\n",
      "==============================================================================\n",
      "Omnibus:                      564.787   Durbin-Watson:                   2.023\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            26852.158\n",
      "Skew:                           5.923   Prob(JB):                         0.00\n",
      "Kurtosis:                      37.918   Cond. No.                     1.14e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.14e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:               Research   R-squared:                       0.008\n",
      "Model:                            OLS   Adj. R-squared:                 -0.007\n",
      "Method:                 Least Squares   F-statistic:                    0.5395\n",
      "Date:                Mon, 25 Oct 2021   Prob (F-statistic):              0.805\n",
      "Time:                        17:09:38   Log-Likelihood:                 530.68\n",
      "No. Observations:                 474   AIC:                            -1045.\n",
      "Df Residuals:                     466   BIC:                            -1012.\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "General Outcome             -0.0024      0.008     -0.277      0.782      -0.019       0.014\n",
      "Num Citations             2.574e-05   4.78e-05      0.538      0.591   -6.83e-05       0.000\n",
      "Public                      -0.0107      0.008     -1.342      0.180      -0.026       0.005\n",
      "Private                     -0.0136      0.013     -1.055      0.292      -0.039       0.012\n",
      "University                  -0.0101      0.009     -1.148      0.252      -0.028       0.007\n",
      "International               -0.0148      0.025     -0.595      0.552      -0.064       0.034\n",
      "Impact F Publishing Year     0.0011      0.002      0.478      0.633      -0.003       0.006\n",
      "constant                     0.0148      0.010      1.477      0.140      -0.005       0.034\n",
      "==============================================================================\n",
      "Omnibus:                      882.912   Durbin-Watson:                   1.993\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           459419.738\n",
      "Skew:                          12.299   Prob(JB):                         0.00\n",
      "Kurtosis:                     153.521   Cond. No.                         615.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "                               OLS Regression Results                               \n",
      "====================================================================================\n",
      "Dep. Variable:     Impact F Publishing Year   R-squared:                       0.082\n",
      "Model:                                  OLS   Adj. R-squared:                  0.068\n",
      "Method:                       Least Squares   F-statistic:                     5.920\n",
      "Date:                      Mon, 25 Oct 2021   Prob (F-statistic):           1.31e-06\n",
      "Time:                              17:09:38   Log-Likelihood:                -901.05\n",
      "No. Observations:                       474   AIC:                             1818.\n",
      "Df Residuals:                           466   BIC:                             1851.\n",
      "Df Model:                                 7                                         \n",
      "Covariance Type:                  nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "General Outcome     0.3522      0.173      2.035      0.042       0.012       0.692\n",
      "Num Citations       0.0020      0.001      2.051      0.041     8.4e-05       0.004\n",
      "Public              0.7114      0.160      4.456      0.000       0.398       1.025\n",
      "Private             0.6030      0.264      2.283      0.023       0.084       1.122\n",
      "University          0.2034      0.181      1.122      0.262      -0.153       0.560\n",
      "International       1.5866      0.504      3.146      0.002       0.596       2.578\n",
      "Research            0.4534      0.949      0.478      0.633      -1.412       2.319\n",
      "constant            1.8008      0.188      9.583      0.000       1.432       2.170\n",
      "==============================================================================\n",
      "Omnibus:                       71.402   Durbin-Watson:                   1.945\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              124.706\n",
      "Skew:                           0.896   Prob(JB):                     8.33e-28\n",
      "Kurtosis:                       4.761   Cond. No.                     1.14e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.14e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "0.0035793370806865843 0    0.193039\n",
      "dtype: float64\n",
      "0.05982756121292732\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.059  [-0.03, 0.15]    0.2\n",
      "0.0024587931162574073 0    0.280801\n",
      "dtype: float64\n",
      "0.04958621901554193\n",
      "           n     r          CI95%  p-val\n",
      "pearson  475  0.05  [-0.04, 0.14]  0.276\n",
      "0.006859760802277348 0    0.071319\n",
      "dtype: float64\n",
      "-0.08282367295814126\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.083  [-0.17, 0.01]  0.074\n",
      "0.0028887371136957496 0    0.242344\n",
      "dtype: float64\n",
      "0.053746973065427285\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.056  [-0.04, 0.15]  0.229\n",
      "0.0017634426753324606 0    0.361129\n",
      "dtype: float64\n",
      "-0.041993364658391506\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.042  [-0.13, 0.05]  0.365\n",
      "0.0001652204313976613 0    0.779926\n",
      "dtype: float64\n",
      "-0.012853809995391954\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475 -0.013  [-0.1, 0.08]  0.782\n",
      "0.008807173420866898 0    0.040908\n",
      "dtype: float64\n",
      "0.09384654186951528\n",
      "           n      r        CI95%  p-val\n",
      "pearson  475  0.094  [0.0, 0.18]  0.043\n",
      "0.0035793370806866953 0    0.193039\n",
      "dtype: float64\n",
      "0.059827561212927316\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.059  [-0.03, 0.15]    0.2\n",
      "0.0008431119415712729 0    0.527845\n",
      "dtype: float64\n",
      "0.029036389954181657\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.028  [-0.06, 0.12]  0.543\n",
      "0.02370123556556336 0    0.000761\n",
      "dtype: float64\n",
      "0.15395205606149967\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.154  [0.06, 0.24]  0.001\n",
      "0.0011516754524093509 0    0.460582\n",
      "dtype: float64\n",
      "0.03393634412262676\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.032  [-0.06, 0.12]   0.49\n",
      "3.2952259497731617e-06 0    0.968525\n",
      "dtype: float64\n",
      "0.001815275722828006\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.002  [-0.09, 0.09]  0.971\n",
      "0.0006208977726062104 0    0.588008\n",
      "dtype: float64\n",
      "0.024917820382330747\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.025  [-0.07, 0.12]  0.591\n",
      "0.008947250247481664 0    0.039329\n",
      "dtype: float64\n",
      "0.09458990563205742\n",
      "           n      r        CI95%  p-val\n",
      "pearson  475  0.095  [0.0, 0.18]   0.04\n",
      "0.0024587931162572962 0    0.280801\n",
      "dtype: float64\n",
      "0.04958621901554193\n",
      "           n     r          CI95%  p-val\n",
      "pearson  475  0.05  [-0.04, 0.14]  0.276\n",
      "0.0008431119415714949 0    0.527845\n",
      "dtype: float64\n",
      "0.02903638995418166\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.028  [-0.06, 0.12]  0.543\n",
      "0.0242964172647121 0    0.000652\n",
      "dtype: float64\n",
      "-0.15587308062879868\n",
      "           n      r           CI95%  p-val\n",
      "pearson  475 -0.156  [-0.24, -0.07]  0.001\n",
      "0.0025862362842588027 0    0.268659\n",
      "dtype: float64\n",
      "-0.05085505170834734\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.048  [-0.14, 0.04]  0.299\n",
      "0.022912143087578607 0    0.000935\n",
      "dtype: float64\n",
      "-0.15136757607750265\n",
      "           n      r           CI95%  p-val\n",
      "pearson  475 -0.151  [-0.24, -0.06]  0.001\n",
      "0.003852379050399146 0    0.176866\n",
      "dtype: float64\n",
      "-0.06206753620371264\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.062  [-0.15, 0.03]   0.18\n",
      "0.04086021232492121 0    0.000009\n",
      "dtype: float64\n",
      "0.20213909153085932\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.202  [0.11, 0.29]    0.0\n",
      "0.006859760802277126 0    0.071319\n",
      "dtype: float64\n",
      "-0.08282367295814125\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.083  [-0.17, 0.01]  0.074\n",
      "0.02370123556556325 0    0.000761\n",
      "dtype: float64\n",
      "0.1539520560614997\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.154  [0.06, 0.24]  0.001\n",
      "0.0242964172647121 0    0.000652\n",
      "dtype: float64\n",
      "-0.15587308062879868\n",
      "           n      r           CI95%  p-val\n",
      "pearson  475 -0.156  [-0.24, -0.07]  0.001\n",
      "0.030509021482183374 0    0.00013\n",
      "dtype: float64\n",
      "-0.17466831848444417\n",
      "           n      r           CI95%  p-val\n",
      "pearson  475 -0.174  [-0.26, -0.09]    0.0\n",
      "0.008809459012897314 0    0.040882\n",
      "dtype: float64\n",
      "-0.09385871836381177\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.094  [-0.18, -0.0]  0.042\n",
      "0.0023825488615295543 0    0.288395\n",
      "dtype: float64\n",
      "-0.048811359963940884\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.049  [-0.14, 0.04]  0.292\n",
      "0.011063873880240327 0    0.021861\n",
      "dtype: float64\n",
      "0.10518495082586753\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.105  [0.01, 0.19]  0.023\n",
      "0.0028887371136956386 0    0.242344\n",
      "dtype: float64\n",
      "0.053746973065427285\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.056  [-0.04, 0.15]  0.229\n",
      "0.001151675452409462"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n",
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n",
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n",
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n",
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n",
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n",
      "<ipython-input-11-7c83d60d5541>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"constant\"] = 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0    0.460582\n",
      "dtype: float64\n",
      "0.03393634412262676\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.032  [-0.06, 0.12]   0.49\n",
      "0.0025862362842588027 0    0.268659\n",
      "dtype: float64\n",
      "-0.050855051708347344\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.048  [-0.14, 0.04]  0.299\n",
      "0.030509021482183263 0    0.00013\n",
      "dtype: float64\n",
      "-0.1746683184844442\n",
      "           n      r           CI95%  p-val\n",
      "pearson  475 -0.174  [-0.26, -0.09]    0.0\n",
      "0.005010062916328217 0    0.123433\n",
      "dtype: float64\n",
      "-0.07078179791675546\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.071  [-0.16, 0.02]  0.126\n",
      "0.002817873480617794 0    0.248214\n",
      "dtype: float64\n",
      "-0.05308364607501875\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.053  [-0.14, 0.04]  0.252\n",
      "0.0026953368603039873 0    0.258781\n",
      "dtype: float64\n",
      "0.05191663375358622\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.051  [-0.04, 0.14]   0.27\n",
      "0.0017634426753326826 0    0.361129\n",
      "dtype: float64\n",
      "-0.041993364658391506\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.042  [-0.13, 0.05]  0.365\n",
      "3.2952259499952063e-06 0    0.968525\n",
      "dtype: float64\n",
      "0.001815275722828006\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.002  [-0.09, 0.09]  0.971\n",
      "0.022912143087578607 0    0.000935\n",
      "dtype: float64\n",
      "-0.15136757607750265\n",
      "           n      r           CI95%  p-val\n",
      "pearson  475 -0.151  [-0.24, -0.06]  0.001\n",
      "0.008809459012897425 0    0.040882\n",
      "dtype: float64\n",
      "-0.09385871836381177\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.094  [-0.18, -0.0]  0.042\n",
      "0.005010062916328328 0    0.123433\n",
      "dtype: float64\n",
      "-0.07078179791675546\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.071  [-0.16, 0.02]  0.126\n",
      "0.0007588532746013454 0    0.549232\n",
      "dtype: float64\n",
      "-0.027547291601923422\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.028  [-0.12, 0.06]  0.552\n",
      "0.020803151632810657 0    0.001623\n",
      "dtype: float64\n",
      "0.14423297692556547\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.144  [0.05, 0.23]  0.002\n",
      "0.0001652204313976613 0    0.779926\n",
      "dtype: float64\n",
      "-0.012853809995391955\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475 -0.013  [-0.1, 0.08]  0.782\n",
      "0.0006208977726062104 0    0.588008\n",
      "dtype: float64\n",
      "0.024917820382330747\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.025  [-0.07, 0.12]  0.591\n",
      "0.003852379050399257 0    0.176866\n",
      "dtype: float64\n",
      "-0.062067536203712644\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.062  [-0.15, 0.03]   0.18\n",
      "0.0023825488615295543 0    0.288395\n",
      "dtype: float64\n",
      "-0.048811359963940884\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.049  [-0.14, 0.04]  0.292\n",
      "0.002817873480617905 0    0.248214\n",
      "dtype: float64\n",
      "-0.05308364607501876\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.053  [-0.14, 0.04]  0.252\n",
      "0.0007588532746013454 0    0.549232\n",
      "dtype: float64\n",
      "-0.027547291601923422\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475 -0.028  [-0.12, 0.06]  0.552\n",
      "0.0004891443135511819 0    0.630652\n",
      "dtype: float64\n",
      "0.02211660718896503\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.022  [-0.07, 0.11]  0.633\n",
      "0.008807173420866676 0    0.040908\n",
      "dtype: float64\n",
      "0.09384654186951528\n",
      "           n      r        CI95%  p-val\n",
      "pearson  475  0.094  [0.0, 0.18]  0.043\n",
      "0.008947250247481775 0    0.039329\n",
      "dtype: float64\n",
      "0.09458990563205742\n",
      "           n      r        CI95%  p-val\n",
      "pearson  475  0.095  [0.0, 0.18]   0.04\n",
      "0.04086021232492121 0    0.000009\n",
      "dtype: float64\n",
      "0.2021390915308593\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.202  [0.11, 0.29]    0.0\n",
      "0.011063873880240438 0    0.021861\n",
      "dtype: float64\n",
      "0.10518495082586753\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.105  [0.01, 0.19]  0.023\n",
      "0.0026953368603040984 0    0.258781\n",
      "dtype: float64\n",
      "0.05191663375358622\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.051  [-0.04, 0.14]   0.27\n",
      "0.020803151632810435 0    0.001623\n",
      "dtype: float64\n",
      "0.14423297692556544\n",
      "           n      r         CI95%  p-val\n",
      "pearson  475  0.144  [0.05, 0.23]  0.002\n",
      "0.0004891443135510709 0    0.630652\n",
      "dtype: float64\n",
      "0.02211660718896503\n",
      "           n      r          CI95%  p-val\n",
      "pearson  475  0.022  [-0.07, 0.11]  0.633\n"
     ]
    }
   ],
   "source": [
    "pcs_dct, sig_corr_dct = gen_pcorr(data[keys].fillna(0), method = \"pearson\", sig = 0.01)\n",
    "\n",
    "import statsmodels.api as sm\n",
    "import numpy\n",
    "residuals = {}\n",
    "partial_corr = {}\n",
    "reg_df = data[keys].dropna()[:-1]\n",
    "for y_var in keys:\n",
    "    X_vars = [x for x in keys if x != y_var]\n",
    "    X= reg_df[X_vars]\n",
    "    X[\"constant\"] = 1\n",
    "    y = reg_df[y_var]\n",
    "    model = sm.OLS(y,X)\n",
    "    results = model.fit()\n",
    "    print(results.summary())\n",
    "    predict = results.predict()\n",
    "    reg_df[\"predict\"] = predict\n",
    "    residuals[y_var] = results.resid\n",
    "\n",
    "for x in keys:\n",
    "    partial_corr[x] = {}\n",
    "    for y in keys:\n",
    "        if x != y:\n",
    "            Y = pd.DataFrame(residuals[y])\n",
    "            X = pd.DataFrame(residuals[x])\n",
    "            model = sm.OLS(Y,X)\n",
    "            results = model.fit()\n",
    "            print(results.rsquared, results.pvalues)\n",
    "            \n",
    "            # check if statsmodels is correctly calcualting the error term... May be negative\n",
    "            partial_corr[x][y] = np.corrcoef(residuals[x], residuals[y])[0][1] * -1\n",
    "            print(partial_corr[x][y])\n",
    "            print(pcs_dct[x][y])\n",
    "        else:\n",
    "            partial_corr[x][y] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>General Outcome</th>\n",
       "      <th>Impact F Publishing Year</th>\n",
       "      <th>International</th>\n",
       "      <th>Num Citations</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Research</th>\n",
       "      <th>University</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>General Outcome</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.093847</td>\n",
       "      <td>-0.041993</td>\n",
       "      <td>0.059828</td>\n",
       "      <td>-0.082824</td>\n",
       "      <td>0.049586</td>\n",
       "      <td>-0.012854</td>\n",
       "      <td>0.053747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Impact F Publishing Year</th>\n",
       "      <td>0.093847</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.144233</td>\n",
       "      <td>0.094590</td>\n",
       "      <td>0.105185</td>\n",
       "      <td>0.202139</td>\n",
       "      <td>0.022117</td>\n",
       "      <td>0.051917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>International</th>\n",
       "      <td>-0.041993</td>\n",
       "      <td>0.144233</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.001815</td>\n",
       "      <td>-0.093859</td>\n",
       "      <td>-0.151368</td>\n",
       "      <td>-0.027547</td>\n",
       "      <td>-0.070782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Num Citations</th>\n",
       "      <td>0.059828</td>\n",
       "      <td>0.094590</td>\n",
       "      <td>0.001815</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.153952</td>\n",
       "      <td>0.029036</td>\n",
       "      <td>0.024918</td>\n",
       "      <td>0.033936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>-0.082824</td>\n",
       "      <td>0.105185</td>\n",
       "      <td>-0.093859</td>\n",
       "      <td>0.153952</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.155873</td>\n",
       "      <td>-0.048811</td>\n",
       "      <td>-0.174668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>0.049586</td>\n",
       "      <td>0.202139</td>\n",
       "      <td>-0.151368</td>\n",
       "      <td>0.029036</td>\n",
       "      <td>-0.155873</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.062068</td>\n",
       "      <td>-0.050855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Research</th>\n",
       "      <td>-0.012854</td>\n",
       "      <td>0.022117</td>\n",
       "      <td>-0.027547</td>\n",
       "      <td>0.024918</td>\n",
       "      <td>-0.048811</td>\n",
       "      <td>-0.062068</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.053084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>University</th>\n",
       "      <td>0.053747</td>\n",
       "      <td>0.051917</td>\n",
       "      <td>-0.070782</td>\n",
       "      <td>0.033936</td>\n",
       "      <td>-0.174668</td>\n",
       "      <td>-0.050855</td>\n",
       "      <td>-0.053084</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          General Outcome  Impact F Publishing Year  \\\n",
       "General Outcome                  1.000000                  0.093847   \n",
       "Impact F Publishing Year         0.093847                  1.000000   \n",
       "International                   -0.041993                  0.144233   \n",
       "Num Citations                    0.059828                  0.094590   \n",
       "Private                         -0.082824                  0.105185   \n",
       "Public                           0.049586                  0.202139   \n",
       "Research                        -0.012854                  0.022117   \n",
       "University                       0.053747                  0.051917   \n",
       "\n",
       "                          International  Num Citations   Private    Public  \\\n",
       "General Outcome               -0.041993       0.059828 -0.082824  0.049586   \n",
       "Impact F Publishing Year       0.144233       0.094590  0.105185  0.202139   \n",
       "International                  1.000000       0.001815 -0.093859 -0.151368   \n",
       "Num Citations                  0.001815       1.000000  0.153952  0.029036   \n",
       "Private                       -0.093859       0.153952  1.000000 -0.155873   \n",
       "Public                        -0.151368       0.029036 -0.155873  1.000000   \n",
       "Research                      -0.027547       0.024918 -0.048811 -0.062068   \n",
       "University                    -0.070782       0.033936 -0.174668 -0.050855   \n",
       "\n",
       "                          Research  University  \n",
       "General Outcome          -0.012854    0.053747  \n",
       "Impact F Publishing Year  0.022117    0.051917  \n",
       "International            -0.027547   -0.070782  \n",
       "Num Citations             0.024918    0.033936  \n",
       "Private                  -0.048811   -0.174668  \n",
       "Public                   -0.062068   -0.050855  \n",
       "Research                  1.000000   -0.053084  \n",
       "University               -0.053084    1.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(partial_corr).sort_index(axis=0, ascending=True).sort_index(axis=1, ascending = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>General Outcome</th>\n",
       "      <th>Impact F Publishing Year</th>\n",
       "      <th>International</th>\n",
       "      <th>Num Citations</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Research</th>\n",
       "      <th>University</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>General Outcome</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.093847</td>\n",
       "      <td>-0.041993</td>\n",
       "      <td>0.059828</td>\n",
       "      <td>-0.082824</td>\n",
       "      <td>0.049586</td>\n",
       "      <td>-0.012854</td>\n",
       "      <td>0.053747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Impact F Publishing Year</th>\n",
       "      <td>0.093847</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.144233</td>\n",
       "      <td>0.094590</td>\n",
       "      <td>0.105185</td>\n",
       "      <td>0.202139</td>\n",
       "      <td>0.022117</td>\n",
       "      <td>0.051917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>International</th>\n",
       "      <td>-0.041993</td>\n",
       "      <td>0.144233</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.001815</td>\n",
       "      <td>-0.093859</td>\n",
       "      <td>-0.151368</td>\n",
       "      <td>-0.027547</td>\n",
       "      <td>-0.070782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Num Citations</th>\n",
       "      <td>0.059828</td>\n",
       "      <td>0.094590</td>\n",
       "      <td>0.001815</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.153952</td>\n",
       "      <td>0.029036</td>\n",
       "      <td>0.024918</td>\n",
       "      <td>0.033936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>-0.082824</td>\n",
       "      <td>0.105185</td>\n",
       "      <td>-0.093859</td>\n",
       "      <td>0.153952</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.155873</td>\n",
       "      <td>-0.048811</td>\n",
       "      <td>-0.174668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>0.049586</td>\n",
       "      <td>0.202139</td>\n",
       "      <td>-0.151368</td>\n",
       "      <td>0.029036</td>\n",
       "      <td>-0.155873</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.062068</td>\n",
       "      <td>-0.050855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Research</th>\n",
       "      <td>-0.012854</td>\n",
       "      <td>0.022117</td>\n",
       "      <td>-0.027547</td>\n",
       "      <td>0.024918</td>\n",
       "      <td>-0.048811</td>\n",
       "      <td>-0.062068</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.053084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>University</th>\n",
       "      <td>0.053747</td>\n",
       "      <td>0.051917</td>\n",
       "      <td>-0.070782</td>\n",
       "      <td>0.033936</td>\n",
       "      <td>-0.174668</td>\n",
       "      <td>-0.050855</td>\n",
       "      <td>-0.053084</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          General Outcome  Impact F Publishing Year  \\\n",
       "General Outcome                  1.000000                  0.093847   \n",
       "Impact F Publishing Year         0.093847                  1.000000   \n",
       "International                   -0.041993                  0.144233   \n",
       "Num Citations                    0.059828                  0.094590   \n",
       "Private                         -0.082824                  0.105185   \n",
       "Public                           0.049586                  0.202139   \n",
       "Research                        -0.012854                  0.022117   \n",
       "University                       0.053747                  0.051917   \n",
       "\n",
       "                          International  Num Citations   Private    Public  \\\n",
       "General Outcome               -0.041993       0.059828 -0.082824  0.049586   \n",
       "Impact F Publishing Year       0.144233       0.094590  0.105185  0.202139   \n",
       "International                  1.000000       0.001815 -0.093859 -0.151368   \n",
       "Num Citations                  0.001815       1.000000  0.153952  0.029036   \n",
       "Private                       -0.093859       0.153952  1.000000 -0.155873   \n",
       "Public                        -0.151368       0.029036 -0.155873  1.000000   \n",
       "Research                      -0.027547       0.024918 -0.048811 -0.062068   \n",
       "University                    -0.070782       0.033936 -0.174668 -0.050855   \n",
       "\n",
       "                          Research  University  \n",
       "General Outcome          -0.012854    0.053747  \n",
       "Impact F Publishing Year  0.022117    0.051917  \n",
       "International            -0.027547   -0.070782  \n",
       "Num Citations             0.024918    0.033936  \n",
       "Private                  -0.048811   -0.174668  \n",
       "Public                   -0.062068   -0.050855  \n",
       "Research                  1.000000   -0.053084  \n",
       "University               -0.053084    1.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df[keys].pcorr().sort_index(axis=0, ascending=True).sort_index(axis=1, ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
